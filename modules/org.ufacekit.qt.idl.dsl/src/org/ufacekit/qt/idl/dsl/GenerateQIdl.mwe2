module org.ufacekit.qt.idl.dsl.QIdl

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/ufacekit/qt/idl/dsl/QIdl.xtext"
var file.extensions = "qbuiltin,qclass,qnamespace,qtypedef"
var projectName = "org.ufacekit.qt.idl.dsl"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
	    scanClassPath = true
		platformUri = "${runtimeProject}/.."
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		pathTestProject = "${runtimeProject}.tests"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// generates Java API for the generated EPackages 
			fragment = ecore.EcoreGeneratorFragment {
			referencedGenModels = "
			platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel,
			platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel
			"
			}

			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}

			// the following fragment generates an Antlr parser 
			fragment = parser.antlr.XtextAntlrGeneratorFragment {}

			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}


			// scoping API 
			fragment = scoping.ImportNamespacesScopingFragment {
				generateStub = true
			}
			fragment = exporting.QualifiedNamesFragment {}
			
			// testing API
			fragment = junit.Junit4Fragment {}

			// formatter API 
			fragment = formatting.FormatterFragment {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {}

			// outline API
			fragment = outline.OutlineTreeProviderFragment {}
			fragment = outline.QuickOutlineFragment {}

			// java-based API for content assistance 
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}

			fragment = builder.BuilderIntegrationFragment {}

			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}
			
			// rename refactoring
			fragment = refactoring.RefactorElementNameFragment {}
			
			// Xbase support
			fragment = types.TypesGeneratorFragment {}
			fragment = xbase.XbaseGeneratorFragment {}
			
			// Code generator
			fragment = generator.GeneratorFragment {
				generateJavaMain = false
				generateMwe = false
			}
			 
			fragment = org.eclipse.xtext.ui.codetemplates.generator.CodetemplatesGeneratorFragment {}
		}
	}
}
