grammar org.ufacekit.qt.idl.dsl.QIdl with org.eclipse.xtext.xbase.Xbase

generate qIdl "http://www.ufacekit.org/qt/idl/dsl/QIdl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

QtIdlTyp:
	element=( QtBuitinType | QtClass | QtNamespace | QtTypeDef );

QtNamespace:
	'q_namespace' name=ID '{'
		( 
			namespaces+=QtNamespace | 
			enums+=QtEnum | 
			flags+=QtFlags | 
			classes+=QtClass | 
			operations+=QtOperation |
			typedef+=QtTypeDef
		)*
	'}'
;

QtType:
	QtEnum | QtFlags | QtClass | QtBuitinType | QtTypeDef | QtTemplateParam;

QtOperation:
	QtFunction | QtSignal | QtSlot;

QtClass:
	'q_class' name=ID ('<' (templateTypes+=QtTemplateParam) ( ',' templateTypes+=QtTemplateParam )* '>')? ('extends' superTypes+=QtClassTypeRef (',' superTypes+=QtClassTypeRef)*)? '{'
		( 
			enums+=QtEnum |
			flags+=QtFlags |
			classes+=QtClass |
			properties+=QtProperty |
			constructors+=QtConstructor |
			operations+=QtOperation |
			typedef+=QtTypeDef
		)*
	'}';
	
QtTemplateParam:
	name=ID // ( 'extends' (typeRef+=[QtTypeRef] | ('&' | typeRef+=[QtTypeRef])* ) )	
;

QtTypeDef:
	'q_typedef' name=ID ':' typeRef=QtTypeRef ';'
;

QtConstructor:
	'q_constructor' {QtConstructor} '(' (params+=QtParameter (',' params+=QtParameter)*)? ');';

QtProperty:
	'q_property' type=QtValue ';';

QtEnum:
	'q_enumeration' name=ID '{'
		values+=QtEnumValue*
	'}';

QtFlags:
	'q_flags' name=ID ':' enumeration=[QtEnum] ';';

QtEnumValue:
	name=ID '=' enumMask=QtEnumValueMask;

QtEnumValueMask:
	( (value+=[QtEnumValue|QualifiedName] | numericValue+=LONG) ('|' (value+=[QtEnumValue|QualifiedName] | numericValue+=LONG) )* );

QtBuitinType:
	'q_builtin' name=ID ':' value=JvmArgumentTypeReference;

QtFunction:
	visibility=Visibility const='const'? virtual=Virtuality? owner=Owner 'q_function' name=ID '(' (params+=QtParameter (',' params+=QtParameter)*)? ')' ':' returnValue=QtReturnValue ';';

QtValue:
	const='const'? valueType=('*'|'&')? typeRef=QtTypeRef name=ID;

//QtTypeRef returns QtParameterizedTypeRef:
//	QtParameterizedTypeRef
//;

QtTypeRef: 
	type=[QtType|QualifiedName]  ('<' (templateTypes+=QtTypeRef) ( ',' templateTypes+=QtTypeRef )* '>')? valueType=('*'|'&')?	
;

QtClassTypeRef: 
	type=[QtClass|QualifiedName]  ('<' (templateTypes+=QtTypeRef) ( ',' templateTypes+=QtTypeRef )* '>')?	
;

QtParameter:
	value=QtValue ('=' (defaultInt=LONG | defaultEnum=[QtEnumValue|QualifiedName]) )?;

QtReturnValue:
	const='const'? valueType=('*'|'&')? typeRef=QtTypeRef;

QtSignal:
	'q_signal' name=ID '(' (params+=QtParameter (',' params+=QtParameter)*)? ')' ':' returnValue=QtReturnValue ';'; 

QtSlot:
	'q_slot' name=ID '(' (params+=QtParameter (',' params+=QtParameter)*)? ')' ':' returnValue=QtReturnValue ';';

enum Virtuality:
	virtual | purevirtual;

enum Visibility: 
	public | protected;

enum Owner:
	member | class;

//enum Type:
//	pointer | reference;

terminal LONG returns ecore::ELong: '-'? ('0'..'9')+;