/*
* generated by Xtext
*/

package org.ufacekit.qt.idl.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class QIdlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class QtIdlTypElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QtIdlTyp");
		private final Assignment cElementAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cElementAlternatives_0 = (Alternatives)cElementAssignment.eContents().get(0);
		private final RuleCall cElementQtBuitinTypeParserRuleCall_0_0 = (RuleCall)cElementAlternatives_0.eContents().get(0);
		private final RuleCall cElementQtClassParserRuleCall_0_1 = (RuleCall)cElementAlternatives_0.eContents().get(1);
		private final RuleCall cElementQtNamespaceParserRuleCall_0_2 = (RuleCall)cElementAlternatives_0.eContents().get(2);
		
		//QtIdlTyp:
		//	element=(QtBuitinType | QtClass | QtNamespace);
		public ParserRule getRule() { return rule; }

		//element=(QtBuitinType | QtClass | QtNamespace)
		public Assignment getElementAssignment() { return cElementAssignment; }

		//QtBuitinType | QtClass | QtNamespace
		public Alternatives getElementAlternatives_0() { return cElementAlternatives_0; }

		//QtBuitinType
		public RuleCall getElementQtBuitinTypeParserRuleCall_0_0() { return cElementQtBuitinTypeParserRuleCall_0_0; }

		//QtClass
		public RuleCall getElementQtClassParserRuleCall_0_1() { return cElementQtClassParserRuleCall_0_1; }

		//QtNamespace
		public RuleCall getElementQtNamespaceParserRuleCall_0_2() { return cElementQtNamespaceParserRuleCall_0_2; }
	}

	public class QtNamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QtNamespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNamespacesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamespacesQtNamespaceParserRuleCall_3_0 = (RuleCall)cNamespacesAssignment_3.eContents().get(0);
		private final Assignment cEnumsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEnumsQtEnumParserRuleCall_4_0 = (RuleCall)cEnumsAssignment_4.eContents().get(0);
		private final Assignment cFlagsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFlagsQtFlagsParserRuleCall_5_0 = (RuleCall)cFlagsAssignment_5.eContents().get(0);
		private final Assignment cClassesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cClassesQtClassParserRuleCall_6_0 = (RuleCall)cClassesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////QtModule:
		////	'module' name=ID '{'
		////		namespaces+=[QtNamespace]*
		////		classes+=[QtClass]* 
		////	'}';
		//QtNamespace:
		//	"namespace" name=ID "{" namespaces+=QtNamespace* enums+=QtEnum* flags+=QtFlags* classes+=QtClass* "}";
		public ParserRule getRule() { return rule; }

		//"namespace" name=ID "{" namespaces+=QtNamespace* enums+=QtEnum* flags+=QtFlags* classes+=QtClass* "}"
		public Group getGroup() { return cGroup; }

		//"namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//namespaces+=QtNamespace*
		public Assignment getNamespacesAssignment_3() { return cNamespacesAssignment_3; }

		//QtNamespace
		public RuleCall getNamespacesQtNamespaceParserRuleCall_3_0() { return cNamespacesQtNamespaceParserRuleCall_3_0; }

		//enums+=QtEnum*
		public Assignment getEnumsAssignment_4() { return cEnumsAssignment_4; }

		//QtEnum
		public RuleCall getEnumsQtEnumParserRuleCall_4_0() { return cEnumsQtEnumParserRuleCall_4_0; }

		//flags+=QtFlags*
		public Assignment getFlagsAssignment_5() { return cFlagsAssignment_5; }

		//QtFlags
		public RuleCall getFlagsQtFlagsParserRuleCall_5_0() { return cFlagsQtFlagsParserRuleCall_5_0; }

		//classes+=QtClass*
		public Assignment getClassesAssignment_6() { return cClassesAssignment_6; }

		//QtClass
		public RuleCall getClassesQtClassParserRuleCall_6_0() { return cClassesQtClassParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class QtTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QtType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQtEnumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQtClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cQtBuitinTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//QtType:
		//	QtEnum | QtClass | QtBuitinType;
		public ParserRule getRule() { return rule; }

		//QtEnum | QtClass | QtBuitinType
		public Alternatives getAlternatives() { return cAlternatives; }

		//QtEnum
		public RuleCall getQtEnumParserRuleCall_0() { return cQtEnumParserRuleCall_0; }

		//QtClass
		public RuleCall getQtClassParserRuleCall_1() { return cQtClassParserRuleCall_1; }

		//QtBuitinType
		public RuleCall getQtBuitinTypeParserRuleCall_2() { return cQtBuitinTypeParserRuleCall_2; }
	}

	public class QtOperationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QtOperations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQtFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQtSignalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cQtSlotParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//QtOperations:
		//	QtFunction | QtSignal | QtSlot;
		public ParserRule getRule() { return rule; }

		//QtFunction | QtSignal | QtSlot
		public Alternatives getAlternatives() { return cAlternatives; }

		//QtFunction
		public RuleCall getQtFunctionParserRuleCall_0() { return cQtFunctionParserRuleCall_0; }

		//QtSignal
		public RuleCall getQtSignalParserRuleCall_1() { return cQtSignalParserRuleCall_1; }

		//QtSlot
		public RuleCall getQtSlotParserRuleCall_2() { return cQtSlotParserRuleCall_2; }
	}

	public class QtClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QtClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypesQtClassCrossReference_2_1_0 = (CrossReference)cSuperTypesAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypesQtClassIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypesQtClassCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cSuperTypesQtClassCrossReference_2_2_1_0 = (CrossReference)cSuperTypesAssignment_2_2_1.eContents().get(0);
		private final RuleCall cSuperTypesQtClassIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cSuperTypesQtClassCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEnumsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEnumsQtEnumParserRuleCall_4_0 = (RuleCall)cEnumsAssignment_4.eContents().get(0);
		private final Assignment cFlagsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFlagsQtFlagsParserRuleCall_5_0 = (RuleCall)cFlagsAssignment_5.eContents().get(0);
		private final Assignment cClassesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cClassesQtClassParserRuleCall_6_0 = (RuleCall)cClassesAssignment_6.eContents().get(0);
		private final Assignment cPropertiesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPropertiesQtPropertyParserRuleCall_7_0 = (RuleCall)cPropertiesAssignment_7.eContents().get(0);
		private final Assignment cConstructorsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cConstructorsQtConstructorParserRuleCall_8_0 = (RuleCall)cConstructorsAssignment_8.eContents().get(0);
		private final Assignment cOperationsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cOperationsQtOperationsParserRuleCall_9_0 = (RuleCall)cOperationsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//QtClass:
		//	"class" name=ID ("extends" superTypes+=[QtClass] ("," superTypes+=[QtClass])*)? "{" enums+=QtEnum* flags+=QtFlags*
		//	classes+=QtClass* properties+=QtProperty* constructors+=QtConstructor* operations+=QtOperations* "}";
		public ParserRule getRule() { return rule; }

		//"class" name=ID ("extends" superTypes+=[QtClass] ("," superTypes+=[QtClass])*)? "{" enums+=QtEnum* flags+=QtFlags*
		//classes+=QtClass* properties+=QtProperty* constructors+=QtConstructor* operations+=QtOperations* "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" superTypes+=[QtClass] ("," superTypes+=[QtClass])*)?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superTypes+=[QtClass]
		public Assignment getSuperTypesAssignment_2_1() { return cSuperTypesAssignment_2_1; }

		//[QtClass]
		public CrossReference getSuperTypesQtClassCrossReference_2_1_0() { return cSuperTypesQtClassCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperTypesQtClassIDTerminalRuleCall_2_1_0_1() { return cSuperTypesQtClassIDTerminalRuleCall_2_1_0_1; }

		//("," superTypes+=[QtClass])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//superTypes+=[QtClass]
		public Assignment getSuperTypesAssignment_2_2_1() { return cSuperTypesAssignment_2_2_1; }

		//[QtClass]
		public CrossReference getSuperTypesQtClassCrossReference_2_2_1_0() { return cSuperTypesQtClassCrossReference_2_2_1_0; }

		//ID
		public RuleCall getSuperTypesQtClassIDTerminalRuleCall_2_2_1_0_1() { return cSuperTypesQtClassIDTerminalRuleCall_2_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//enums+=QtEnum*
		public Assignment getEnumsAssignment_4() { return cEnumsAssignment_4; }

		//QtEnum
		public RuleCall getEnumsQtEnumParserRuleCall_4_0() { return cEnumsQtEnumParserRuleCall_4_0; }

		//flags+=QtFlags*
		public Assignment getFlagsAssignment_5() { return cFlagsAssignment_5; }

		//QtFlags
		public RuleCall getFlagsQtFlagsParserRuleCall_5_0() { return cFlagsQtFlagsParserRuleCall_5_0; }

		//classes+=QtClass*
		public Assignment getClassesAssignment_6() { return cClassesAssignment_6; }

		//QtClass
		public RuleCall getClassesQtClassParserRuleCall_6_0() { return cClassesQtClassParserRuleCall_6_0; }

		//properties+=QtProperty*
		public Assignment getPropertiesAssignment_7() { return cPropertiesAssignment_7; }

		//QtProperty
		public RuleCall getPropertiesQtPropertyParserRuleCall_7_0() { return cPropertiesQtPropertyParserRuleCall_7_0; }

		//constructors+=QtConstructor*
		public Assignment getConstructorsAssignment_8() { return cConstructorsAssignment_8; }

		//QtConstructor
		public RuleCall getConstructorsQtConstructorParserRuleCall_8_0() { return cConstructorsQtConstructorParserRuleCall_8_0; }

		//operations+=QtOperations*
		public Assignment getOperationsAssignment_9() { return cOperationsAssignment_9; }

		//QtOperations
		public RuleCall getOperationsQtOperationsParserRuleCall_9_0() { return cOperationsQtOperationsParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class QtConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QtConstructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstructorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsQtValueParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsQtValueParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//QtConstructor:
		//	"constructor" "(" (params+=QtValue ("," params+=QtValue)*)? ");";
		public ParserRule getRule() { return rule; }

		//"constructor" "(" (params+=QtValue ("," params+=QtValue)*)? ");"
		public Group getGroup() { return cGroup; }

		//"constructor"
		public Keyword getConstructorKeyword_0() { return cConstructorKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(params+=QtValue ("," params+=QtValue)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=QtValue
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//QtValue
		public RuleCall getParamsQtValueParserRuleCall_2_0_0() { return cParamsQtValueParserRuleCall_2_0_0; }

		//("," params+=QtValue)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//params+=QtValue
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//QtValue
		public RuleCall getParamsQtValueParserRuleCall_2_1_1_0() { return cParamsQtValueParserRuleCall_2_1_1_0; }

		//");"
		public Keyword getRightParenthesisSemicolonKeyword_3() { return cRightParenthesisSemicolonKeyword_3; }
	}

	public class QtPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QtProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeQtValueParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//QtProperty:
		//	"property" type=QtValue ";";
		public ParserRule getRule() { return rule; }

		//"property" type=QtValue ";"
		public Group getGroup() { return cGroup; }

		//"property"
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }

		//type=QtValue
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//QtValue
		public RuleCall getTypeQtValueParserRuleCall_1_0() { return cTypeQtValueParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class QtEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QtEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesQtEnumValueParserRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//QtEnum:
		//	"enumeration" name=ID "{" values+=QtEnumValue* "}";
		public ParserRule getRule() { return rule; }

		//"enumeration" name=ID "{" values+=QtEnumValue* "}"
		public Group getGroup() { return cGroup; }

		//"enumeration"
		public Keyword getEnumerationKeyword_0() { return cEnumerationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//values+=QtEnumValue*
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }

		//QtEnumValue
		public RuleCall getValuesQtEnumValueParserRuleCall_3_0() { return cValuesQtEnumValueParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class QtFlagsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QtFlags");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlagsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEnumerationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEnumerationQtEnumCrossReference_3_0 = (CrossReference)cEnumerationAssignment_3.eContents().get(0);
		private final RuleCall cEnumerationQtEnumIDTerminalRuleCall_3_0_1 = (RuleCall)cEnumerationQtEnumCrossReference_3_0.eContents().get(1);
		
		//QtFlags:
		//	"flags" name=ID ":" enumeration=[QtEnum];
		public ParserRule getRule() { return rule; }

		//"flags" name=ID ":" enumeration=[QtEnum]
		public Group getGroup() { return cGroup; }

		//"flags"
		public Keyword getFlagsKeyword_0() { return cFlagsKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//enumeration=[QtEnum]
		public Assignment getEnumerationAssignment_3() { return cEnumerationAssignment_3; }

		//[QtEnum]
		public CrossReference getEnumerationQtEnumCrossReference_3_0() { return cEnumerationQtEnumCrossReference_3_0; }

		//ID
		public RuleCall getEnumerationQtEnumIDTerminalRuleCall_3_0_1() { return cEnumerationQtEnumIDTerminalRuleCall_3_0_1; }
	}

	public class QtEnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QtEnumValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueQtLiteralValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//QtEnumValue:
		//	name=ID "=" value=QtLiteralValue;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value=QtLiteralValue
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=QtLiteralValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//QtLiteralValue
		public RuleCall getValueQtLiteralValueParserRuleCall_2_0() { return cValueQtLiteralValueParserRuleCall_2_0; }
	}

	public class QtLiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QtLiteralValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cValueAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cValueQtEnumValueCrossReference_0_0_0 = (CrossReference)cValueAssignment_0_0.eContents().get(0);
		private final RuleCall cValueQtEnumValueIDTerminalRuleCall_0_0_0_1 = (RuleCall)cValueQtEnumValueCrossReference_0_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cValueAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final CrossReference cValueQtEnumValueCrossReference_0_1_1_0 = (CrossReference)cValueAssignment_0_1_1.eContents().get(0);
		private final RuleCall cValueQtEnumValueIDTerminalRuleCall_0_1_1_0_1 = (RuleCall)cValueQtEnumValueCrossReference_0_1_1_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//QtLiteralValue:
		//	value+=[QtEnumValue] ("|" value+=[QtEnumValue])* | INT | STRING;
		public ParserRule getRule() { return rule; }

		//value+=[QtEnumValue] ("|" value+=[QtEnumValue])* | INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//value+=[QtEnumValue] ("|" value+=[QtEnumValue])*
		public Group getGroup_0() { return cGroup_0; }

		//value+=[QtEnumValue]
		public Assignment getValueAssignment_0_0() { return cValueAssignment_0_0; }

		//[QtEnumValue]
		public CrossReference getValueQtEnumValueCrossReference_0_0_0() { return cValueQtEnumValueCrossReference_0_0_0; }

		//ID
		public RuleCall getValueQtEnumValueIDTerminalRuleCall_0_0_0_1() { return cValueQtEnumValueIDTerminalRuleCall_0_0_0_1; }

		//("|" value+=[QtEnumValue])*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"|"
		public Keyword getVerticalLineKeyword_0_1_0() { return cVerticalLineKeyword_0_1_0; }

		//value+=[QtEnumValue]
		public Assignment getValueAssignment_0_1_1() { return cValueAssignment_0_1_1; }

		//[QtEnumValue]
		public CrossReference getValueQtEnumValueCrossReference_0_1_1_0() { return cValueQtEnumValueCrossReference_0_1_1_0; }

		//ID
		public RuleCall getValueQtEnumValueIDTerminalRuleCall_0_1_1_0_1() { return cValueQtEnumValueIDTerminalRuleCall_0_1_1_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}

	public class QtBuitinTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QtBuitinType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBuiltinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueJvmArgumentTypeReferenceParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//QtBuitinType:
		//	"builtin" name=ID ":" value=JvmArgumentTypeReference;
		public ParserRule getRule() { return rule; }

		//"builtin" name=ID ":" value=JvmArgumentTypeReference
		public Group getGroup() { return cGroup; }

		//"builtin"
		public Keyword getBuiltinKeyword_0() { return cBuiltinKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//value=JvmArgumentTypeReference
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//JvmArgumentTypeReference
		public RuleCall getValueJvmArgumentTypeReferenceParserRuleCall_3_0() { return cValueJvmArgumentTypeReferenceParserRuleCall_3_0; }
	}

	public class QtFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QtFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cConstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cConstConstKeyword_1_0 = (Keyword)cConstAssignment_1.eContents().get(0);
		private final Assignment cVirtualAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVirtualVirtualityEnumRuleCall_2_0 = (RuleCall)cVirtualAssignment_2.eContents().get(0);
		private final Assignment cOwnerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnerOwnerEnumRuleCall_3_0 = (RuleCall)cOwnerAssignment_3.eContents().get(0);
		private final Keyword cFunctionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cParamsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cParamsQtValueParserRuleCall_7_0_0 = (RuleCall)cParamsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cParamsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cParamsQtValueParserRuleCall_7_1_1_0 = (RuleCall)cParamsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cReturnValueAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cReturnValueQtReturnValueParserRuleCall_10_0 = (RuleCall)cReturnValueAssignment_10.eContents().get(0);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//QtFunction:
		//	visibility=Visibility const="const"? virtual=Virtuality? owner=Owner "function" name=ID "(" (params+=QtValue (","
		//	params+=QtValue)*)? ")" ":" returnValue=QtReturnValue ";";
		public ParserRule getRule() { return rule; }

		//visibility=Visibility const="const"? virtual=Virtuality? owner=Owner "function" name=ID "(" (params+=QtValue (","
		//params+=QtValue)*)? ")" ":" returnValue=QtReturnValue ";"
		public Group getGroup() { return cGroup; }

		//visibility=Visibility
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }

		//const="const"?
		public Assignment getConstAssignment_1() { return cConstAssignment_1; }

		//"const"
		public Keyword getConstConstKeyword_1_0() { return cConstConstKeyword_1_0; }

		//virtual=Virtuality?
		public Assignment getVirtualAssignment_2() { return cVirtualAssignment_2; }

		//Virtuality
		public RuleCall getVirtualVirtualityEnumRuleCall_2_0() { return cVirtualVirtualityEnumRuleCall_2_0; }

		//owner=Owner
		public Assignment getOwnerAssignment_3() { return cOwnerAssignment_3; }

		//Owner
		public RuleCall getOwnerOwnerEnumRuleCall_3_0() { return cOwnerOwnerEnumRuleCall_3_0; }

		//"function"
		public Keyword getFunctionKeyword_4() { return cFunctionKeyword_4; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//(params+=QtValue ("," params+=QtValue)*)?
		public Group getGroup_7() { return cGroup_7; }

		//params+=QtValue
		public Assignment getParamsAssignment_7_0() { return cParamsAssignment_7_0; }

		//QtValue
		public RuleCall getParamsQtValueParserRuleCall_7_0_0() { return cParamsQtValueParserRuleCall_7_0_0; }

		//("," params+=QtValue)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//params+=QtValue
		public Assignment getParamsAssignment_7_1_1() { return cParamsAssignment_7_1_1; }

		//QtValue
		public RuleCall getParamsQtValueParserRuleCall_7_1_1_0() { return cParamsQtValueParserRuleCall_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//":"
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }

		//returnValue=QtReturnValue
		public Assignment getReturnValueAssignment_10() { return cReturnValueAssignment_10; }

		//QtReturnValue
		public RuleCall getReturnValueQtReturnValueParserRuleCall_10_0() { return cReturnValueQtReturnValueParserRuleCall_10_0; }

		//";"
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
	}

	public class QtValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QtValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstConstKeyword_0_0 = (Keyword)cConstAssignment_0.eContents().get(0);
		private final Assignment cValueTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTypeTypeEnumRuleCall_1_0 = (RuleCall)cValueTypeAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeQtTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeQtTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeQtTypeCrossReference_2_0.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDefaultAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefaultQtLiteralValueParserRuleCall_5_0 = (RuleCall)cDefaultAssignment_5.eContents().get(0);
		
		//QtValue:
		//	const="const"? valueType=Type? type=[QtType] name=ID "=" default=QtLiteralValue;
		public ParserRule getRule() { return rule; }

		//const="const"? valueType=Type? type=[QtType] name=ID "=" default=QtLiteralValue
		public Group getGroup() { return cGroup; }

		//const="const"?
		public Assignment getConstAssignment_0() { return cConstAssignment_0; }

		//"const"
		public Keyword getConstConstKeyword_0_0() { return cConstConstKeyword_0_0; }

		//valueType=Type?
		public Assignment getValueTypeAssignment_1() { return cValueTypeAssignment_1; }

		//Type
		public RuleCall getValueTypeTypeEnumRuleCall_1_0() { return cValueTypeTypeEnumRuleCall_1_0; }

		//type=[QtType]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[QtType]
		public CrossReference getTypeQtTypeCrossReference_2_0() { return cTypeQtTypeCrossReference_2_0; }

		//ID
		public RuleCall getTypeQtTypeIDTerminalRuleCall_2_0_1() { return cTypeQtTypeIDTerminalRuleCall_2_0_1; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//default=QtLiteralValue
		public Assignment getDefaultAssignment_5() { return cDefaultAssignment_5; }

		//QtLiteralValue
		public RuleCall getDefaultQtLiteralValueParserRuleCall_5_0() { return cDefaultQtLiteralValueParserRuleCall_5_0; }
	}

	public class QtReturnValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QtReturnValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstConstKeyword_0_0 = (Keyword)cConstAssignment_0.eContents().get(0);
		private final Assignment cValueTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTypeTypeEnumRuleCall_1_0 = (RuleCall)cValueTypeAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeQtTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeQtTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeQtTypeCrossReference_2_0.eContents().get(1);
		
		//QtReturnValue:
		//	const="const"? valueType=Type? type=[QtType];
		public ParserRule getRule() { return rule; }

		//const="const"? valueType=Type? type=[QtType]
		public Group getGroup() { return cGroup; }

		//const="const"?
		public Assignment getConstAssignment_0() { return cConstAssignment_0; }

		//"const"
		public Keyword getConstConstKeyword_0_0() { return cConstConstKeyword_0_0; }

		//valueType=Type?
		public Assignment getValueTypeAssignment_1() { return cValueTypeAssignment_1; }

		//Type
		public RuleCall getValueTypeTypeEnumRuleCall_1_0() { return cValueTypeTypeEnumRuleCall_1_0; }

		//type=[QtType]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[QtType]
		public CrossReference getTypeQtTypeCrossReference_2_0() { return cTypeQtTypeCrossReference_2_0; }

		//ID
		public RuleCall getTypeQtTypeIDTerminalRuleCall_2_0_1() { return cTypeQtTypeIDTerminalRuleCall_2_0_1; }
	}

	public class QtSignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QtSignal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSignalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsQtValueParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsQtValueParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReturnValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cReturnValueQtReturnValueParserRuleCall_6_0 = (RuleCall)cReturnValueAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//QtSignal:
		//	"signal" name=ID "(" (params+=QtValue ("," params+=QtValue)*)? ")" ":" returnValue=QtReturnValue ";";
		public ParserRule getRule() { return rule; }

		//"signal" name=ID "(" (params+=QtValue ("," params+=QtValue)*)? ")" ":" returnValue=QtReturnValue ";"
		public Group getGroup() { return cGroup; }

		//"signal"
		public Keyword getSignalKeyword_0() { return cSignalKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(params+=QtValue ("," params+=QtValue)*)?
		public Group getGroup_3() { return cGroup_3; }

		//params+=QtValue
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//QtValue
		public RuleCall getParamsQtValueParserRuleCall_3_0_0() { return cParamsQtValueParserRuleCall_3_0_0; }

		//("," params+=QtValue)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=QtValue
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//QtValue
		public RuleCall getParamsQtValueParserRuleCall_3_1_1_0() { return cParamsQtValueParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//returnValue=QtReturnValue
		public Assignment getReturnValueAssignment_6() { return cReturnValueAssignment_6; }

		//QtReturnValue
		public RuleCall getReturnValueQtReturnValueParserRuleCall_6_0() { return cReturnValueQtReturnValueParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class QtSlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QtSlot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSlotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsQtValueParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsQtValueParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReturnValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cReturnValueQtReturnValueParserRuleCall_6_0 = (RuleCall)cReturnValueAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//QtSlot:
		//	"slot" name=ID "(" (params+=QtValue ("," params+=QtValue)*)? ")" ":" returnValue=QtReturnValue ";";
		public ParserRule getRule() { return rule; }

		//"slot" name=ID "(" (params+=QtValue ("," params+=QtValue)*)? ")" ":" returnValue=QtReturnValue ";"
		public Group getGroup() { return cGroup; }

		//"slot"
		public Keyword getSlotKeyword_0() { return cSlotKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(params+=QtValue ("," params+=QtValue)*)?
		public Group getGroup_3() { return cGroup_3; }

		//params+=QtValue
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//QtValue
		public RuleCall getParamsQtValueParserRuleCall_3_0_0() { return cParamsQtValueParserRuleCall_3_0_0; }

		//("," params+=QtValue)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=QtValue
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//QtValue
		public RuleCall getParamsQtValueParserRuleCall_3_1_1_0() { return cParamsQtValueParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//returnValue=QtReturnValue
		public Assignment getReturnValueAssignment_6() { return cReturnValueAssignment_6; }

		//QtReturnValue
		public RuleCall getReturnValueQtReturnValueParserRuleCall_6_0() { return cReturnValueQtReturnValueParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	
	
	public class VirtualityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Virtuality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVirtualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVirtualVirtualKeyword_0_0 = (Keyword)cVirtualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPurevirtualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPurevirtualPurevirtualKeyword_1_0 = (Keyword)cPurevirtualEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Virtuality:
		//	virtual | purevirtual;
		public EnumRule getRule() { return rule; }

		//virtual | purevirtual
		public Alternatives getAlternatives() { return cAlternatives; }

		//virtual
		public EnumLiteralDeclaration getVirtualEnumLiteralDeclaration_0() { return cVirtualEnumLiteralDeclaration_0; }

		//"virtual"
		public Keyword getVirtualVirtualKeyword_0_0() { return cVirtualVirtualKeyword_0_0; }

		//purevirtual
		public EnumLiteralDeclaration getPurevirtualEnumLiteralDeclaration_1() { return cPurevirtualEnumLiteralDeclaration_1; }

		//"purevirtual"
		public Keyword getPurevirtualPurevirtualKeyword_1_0() { return cPurevirtualPurevirtualKeyword_1_0; }
	}

	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cProtectedProtectedKeyword_1_0 = (Keyword)cProtectedEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Visibility:
		//	public | protected;
		public EnumRule getRule() { return rule; }

		//public | protected
		public Alternatives getAlternatives() { return cAlternatives; }

		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }

		//"public"
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }

		//protected
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_1() { return cProtectedEnumLiteralDeclaration_1; }

		//"protected"
		public Keyword getProtectedProtectedKeyword_1_0() { return cProtectedProtectedKeyword_1_0; }
	}

	public class OwnerElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Owner");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMemberEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMemberMemberKeyword_0_0 = (Keyword)cMemberEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cClassEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cClassClassKeyword_1_0 = (Keyword)cClassEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Owner:
		//	member | class;
		public EnumRule getRule() { return rule; }

		//member | class
		public Alternatives getAlternatives() { return cAlternatives; }

		//member
		public EnumLiteralDeclaration getMemberEnumLiteralDeclaration_0() { return cMemberEnumLiteralDeclaration_0; }

		//"member"
		public Keyword getMemberMemberKeyword_0_0() { return cMemberMemberKeyword_0_0; }

		//class
		public EnumLiteralDeclaration getClassEnumLiteralDeclaration_1() { return cClassEnumLiteralDeclaration_1; }

		//"class"
		public Keyword getClassClassKeyword_1_0() { return cClassClassKeyword_1_0; }
	}

	public class TypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPointerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPointerPointerKeyword_0_0 = (Keyword)cPointerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cReferenceEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cReferenceReferenceKeyword_1_0 = (Keyword)cReferenceEnumLiteralDeclaration_1.eContents().get(0);
		
		////terminal HEX returns ecore::EInt: '0x' ('0'..'9' | 'A' .. 'F')+;
		//enum Type:
		//	pointer | reference;
		public EnumRule getRule() { return rule; }

		//pointer //terminal HEX returns ecore::EInt: '0x' ('0'..'9' | 'A' .. 'F')+;
		//| reference
		public Alternatives getAlternatives() { return cAlternatives; }

		//pointer
		public EnumLiteralDeclaration getPointerEnumLiteralDeclaration_0() { return cPointerEnumLiteralDeclaration_0; }

		//"pointer"
		public Keyword getPointerPointerKeyword_0_0() { return cPointerPointerKeyword_0_0; }

		////terminal HEX returns ecore::EInt: '0x' ('0'..'9' | 'A' .. 'F')+;
		//reference
		public EnumLiteralDeclaration getReferenceEnumLiteralDeclaration_1() { return cReferenceEnumLiteralDeclaration_1; }

		//"reference"
		public Keyword getReferenceReferenceKeyword_1_0() { return cReferenceReferenceKeyword_1_0; }
	}
	
	private QtIdlTypElements pQtIdlTyp;
	private QtNamespaceElements pQtNamespace;
	private QtTypeElements pQtType;
	private QtOperationsElements pQtOperations;
	private QtClassElements pQtClass;
	private QtConstructorElements pQtConstructor;
	private QtPropertyElements pQtProperty;
	private QtEnumElements pQtEnum;
	private QtFlagsElements pQtFlags;
	private QtEnumValueElements pQtEnumValue;
	private QtLiteralValueElements pQtLiteralValue;
	private QtBuitinTypeElements pQtBuitinType;
	private QtFunctionElements pQtFunction;
	private QtValueElements pQtValue;
	private QtReturnValueElements pQtReturnValue;
	private QtSignalElements pQtSignal;
	private QtSlotElements pQtSlot;
	private VirtualityElements unknownRuleVirtuality;
	private VisibilityElements unknownRuleVisibility;
	private OwnerElements unknownRuleOwner;
	private TypeElements unknownRuleType;
	
	private final GrammarProvider grammarProvider;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public QIdlGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammarProvider = grammarProvider;
		this.gaXbase = gaXbase;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//QtIdlTyp:
	//	element=(QtBuitinType | QtClass | QtNamespace);
	public QtIdlTypElements getQtIdlTypAccess() {
		return (pQtIdlTyp != null) ? pQtIdlTyp : (pQtIdlTyp = new QtIdlTypElements());
	}
	
	public ParserRule getQtIdlTypRule() {
		return getQtIdlTypAccess().getRule();
	}

	////QtModule:
	////	'module' name=ID '{'
	////		namespaces+=[QtNamespace]*
	////		classes+=[QtClass]* 
	////	'}';
	//QtNamespace:
	//	"namespace" name=ID "{" namespaces+=QtNamespace* enums+=QtEnum* flags+=QtFlags* classes+=QtClass* "}";
	public QtNamespaceElements getQtNamespaceAccess() {
		return (pQtNamespace != null) ? pQtNamespace : (pQtNamespace = new QtNamespaceElements());
	}
	
	public ParserRule getQtNamespaceRule() {
		return getQtNamespaceAccess().getRule();
	}

	//QtType:
	//	QtEnum | QtClass | QtBuitinType;
	public QtTypeElements getQtTypeAccess() {
		return (pQtType != null) ? pQtType : (pQtType = new QtTypeElements());
	}
	
	public ParserRule getQtTypeRule() {
		return getQtTypeAccess().getRule();
	}

	//QtOperations:
	//	QtFunction | QtSignal | QtSlot;
	public QtOperationsElements getQtOperationsAccess() {
		return (pQtOperations != null) ? pQtOperations : (pQtOperations = new QtOperationsElements());
	}
	
	public ParserRule getQtOperationsRule() {
		return getQtOperationsAccess().getRule();
	}

	//QtClass:
	//	"class" name=ID ("extends" superTypes+=[QtClass] ("," superTypes+=[QtClass])*)? "{" enums+=QtEnum* flags+=QtFlags*
	//	classes+=QtClass* properties+=QtProperty* constructors+=QtConstructor* operations+=QtOperations* "}";
	public QtClassElements getQtClassAccess() {
		return (pQtClass != null) ? pQtClass : (pQtClass = new QtClassElements());
	}
	
	public ParserRule getQtClassRule() {
		return getQtClassAccess().getRule();
	}

	//QtConstructor:
	//	"constructor" "(" (params+=QtValue ("," params+=QtValue)*)? ");";
	public QtConstructorElements getQtConstructorAccess() {
		return (pQtConstructor != null) ? pQtConstructor : (pQtConstructor = new QtConstructorElements());
	}
	
	public ParserRule getQtConstructorRule() {
		return getQtConstructorAccess().getRule();
	}

	//QtProperty:
	//	"property" type=QtValue ";";
	public QtPropertyElements getQtPropertyAccess() {
		return (pQtProperty != null) ? pQtProperty : (pQtProperty = new QtPropertyElements());
	}
	
	public ParserRule getQtPropertyRule() {
		return getQtPropertyAccess().getRule();
	}

	//QtEnum:
	//	"enumeration" name=ID "{" values+=QtEnumValue* "}";
	public QtEnumElements getQtEnumAccess() {
		return (pQtEnum != null) ? pQtEnum : (pQtEnum = new QtEnumElements());
	}
	
	public ParserRule getQtEnumRule() {
		return getQtEnumAccess().getRule();
	}

	//QtFlags:
	//	"flags" name=ID ":" enumeration=[QtEnum];
	public QtFlagsElements getQtFlagsAccess() {
		return (pQtFlags != null) ? pQtFlags : (pQtFlags = new QtFlagsElements());
	}
	
	public ParserRule getQtFlagsRule() {
		return getQtFlagsAccess().getRule();
	}

	//QtEnumValue:
	//	name=ID "=" value=QtLiteralValue;
	public QtEnumValueElements getQtEnumValueAccess() {
		return (pQtEnumValue != null) ? pQtEnumValue : (pQtEnumValue = new QtEnumValueElements());
	}
	
	public ParserRule getQtEnumValueRule() {
		return getQtEnumValueAccess().getRule();
	}

	//QtLiteralValue:
	//	value+=[QtEnumValue] ("|" value+=[QtEnumValue])* | INT | STRING;
	public QtLiteralValueElements getQtLiteralValueAccess() {
		return (pQtLiteralValue != null) ? pQtLiteralValue : (pQtLiteralValue = new QtLiteralValueElements());
	}
	
	public ParserRule getQtLiteralValueRule() {
		return getQtLiteralValueAccess().getRule();
	}

	//QtBuitinType:
	//	"builtin" name=ID ":" value=JvmArgumentTypeReference;
	public QtBuitinTypeElements getQtBuitinTypeAccess() {
		return (pQtBuitinType != null) ? pQtBuitinType : (pQtBuitinType = new QtBuitinTypeElements());
	}
	
	public ParserRule getQtBuitinTypeRule() {
		return getQtBuitinTypeAccess().getRule();
	}

	//QtFunction:
	//	visibility=Visibility const="const"? virtual=Virtuality? owner=Owner "function" name=ID "(" (params+=QtValue (","
	//	params+=QtValue)*)? ")" ":" returnValue=QtReturnValue ";";
	public QtFunctionElements getQtFunctionAccess() {
		return (pQtFunction != null) ? pQtFunction : (pQtFunction = new QtFunctionElements());
	}
	
	public ParserRule getQtFunctionRule() {
		return getQtFunctionAccess().getRule();
	}

	//QtValue:
	//	const="const"? valueType=Type? type=[QtType] name=ID "=" default=QtLiteralValue;
	public QtValueElements getQtValueAccess() {
		return (pQtValue != null) ? pQtValue : (pQtValue = new QtValueElements());
	}
	
	public ParserRule getQtValueRule() {
		return getQtValueAccess().getRule();
	}

	//QtReturnValue:
	//	const="const"? valueType=Type? type=[QtType];
	public QtReturnValueElements getQtReturnValueAccess() {
		return (pQtReturnValue != null) ? pQtReturnValue : (pQtReturnValue = new QtReturnValueElements());
	}
	
	public ParserRule getQtReturnValueRule() {
		return getQtReturnValueAccess().getRule();
	}

	//QtSignal:
	//	"signal" name=ID "(" (params+=QtValue ("," params+=QtValue)*)? ")" ":" returnValue=QtReturnValue ";";
	public QtSignalElements getQtSignalAccess() {
		return (pQtSignal != null) ? pQtSignal : (pQtSignal = new QtSignalElements());
	}
	
	public ParserRule getQtSignalRule() {
		return getQtSignalAccess().getRule();
	}

	//QtSlot:
	//	"slot" name=ID "(" (params+=QtValue ("," params+=QtValue)*)? ")" ":" returnValue=QtReturnValue ";";
	public QtSlotElements getQtSlotAccess() {
		return (pQtSlot != null) ? pQtSlot : (pQtSlot = new QtSlotElements());
	}
	
	public ParserRule getQtSlotRule() {
		return getQtSlotAccess().getRule();
	}

	//enum Virtuality:
	//	virtual | purevirtual;
	public VirtualityElements getVirtualityAccess() {
		return (unknownRuleVirtuality != null) ? unknownRuleVirtuality : (unknownRuleVirtuality = new VirtualityElements());
	}
	
	public EnumRule getVirtualityRule() {
		return getVirtualityAccess().getRule();
	}

	//enum Visibility:
	//	public | protected;
	public VisibilityElements getVisibilityAccess() {
		return (unknownRuleVisibility != null) ? unknownRuleVisibility : (unknownRuleVisibility = new VisibilityElements());
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}

	//enum Owner:
	//	member | class;
	public OwnerElements getOwnerAccess() {
		return (unknownRuleOwner != null) ? unknownRuleOwner : (unknownRuleOwner = new OwnerElements());
	}
	
	public EnumRule getOwnerRule() {
		return getOwnerAccess().getRule();
	}

	////terminal HEX returns ecore::EInt: '0x' ('0'..'9' | 'A' .. 'F')+;
	//enum Type:
	//	pointer | reference;
	public TypeElements getTypeAccess() {
		return (unknownRuleType != null) ? unknownRuleType : (unknownRuleType = new TypeElements());
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement]
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof")
	//	type=[types::JvmType|QualifiedName] | => ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement] OpSingleAssign)
	//	value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | spreading?="*.")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XClosure | XBooleanLiteral | XIntLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	{XClosure} "[" (formalParameters+=JvmFormalParameter ("," formalParameters+=JvmFormalParameter)*)? "|"
	//	expression=XExpression "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (formalParameters+=JvmFormalParameter ("," formalParameters+=JvmFormalParameter)*)? "|")
	//	expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (localVarName=ID ":")? switch=XExpression "{" cases+=XCasePart+ ("default" ":"
	//	default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ID) | name=ID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	ID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ID ('::' ID)*; and XFeatureCall: (StaticQualifier '::')? ID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? "("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")";
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XIntLiteral returns XExpression:
	//	{XIntLiteral} value=INT;
	public XbaseGrammarAccess.XIntLiteralElements getXIntLiteralAccess() {
		return gaXbase.getXIntLiteralAccess();
	}
	
	public ParserRule getXIntLiteralRule() {
		return getXIntLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=JvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//JvmTypeReference returns JvmParameterizedTypeReference:
	//	JvmParameterizedTypeReference | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)* ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
