q_class QMap {
    q_typedef ConstIterator : ___UNKNOWN___;

    q_typedef Iterator : ___UNKNOWN___;

    q_typedef Node : ___UNKNOWN___;

    q_typedef PayloadNode : ___UNKNOWN___;

    q_typedef difference_type : ___UNKNOWN___;

    q_typedef key_type : ___UNKNOWN___;

    q_typedef mapped_type : ___UNKNOWN___;

    q_typedef size_type : ___UNKNOWN___;


    q_class const_iterator {
        q_typedef difference_type : ___UNKNOWN___;

        q_typedef iterator_category : ___UNKNOWN___;

        q_typedef pointer : ___UNKNOWN___;

        q_typedef reference : ___UNKNOWN___;

        q_typedef value_type : ___UNKNOWN___;


        public const member q_function value() : const T &;


    }

    q_class iterator {
        q_typedef difference_type : ___UNKNOWN___;

        q_typedef iterator_category : ___UNKNOWN___;

        q_typedef pointer : ___UNKNOWN___;

        q_typedef reference : ___UNKNOWN___;

        q_typedef value_type : ___UNKNOWN___;


        public const member q_function key() : const Key &;
        public const member q_function value() : T &;


    }


    public const member q_function begin() : const_iterator;
    public member q_function begin() : iterator;
    public member q_function clear() : void;
    public const member q_function constBegin() : const_iterator;
    public const member q_function constEnd() : const_iterator;
    public const member q_function constFind(const Key & key) : const_iterator;
    public const member q_function contains(const Key & key) : bool;
    public const member q_function count(const Key & key) : int;
    public const member q_function count() : int;
    public member q_function end() : iterator;
    public const member q_function end() : const_iterator;
    public member q_function erase(iterator pos) : iterator;
    public const member q_function find(const Key & key) : const_iterator;
    public member q_function find(const Key & key) : iterator;
    public member q_function insert(const Key & key, const T & value) : iterator;
    public member q_function insertMulti(const Key & key, const T & value) : iterator;
    public const member q_function isEmpty() : bool;
    public const member q_function key(const T & value, const Key & defaultKey) : const Key;
    public const member q_function key(const T & value) : const Key;
    public const member q_function keys() : QList<Key>;
    public const member q_function keys(const T & value) : QList<Key>;
    public const member q_function lowerBound(const Key & key) : const_iterator;
    public member q_function lowerBound(const Key & key) : iterator;
    public member q_function remove(const Key & key) : int;
    public const member q_function size() : int;
    public member q_function take(const Key & key) : T;
    public const member q_function toStdMap() : std.map<Key, T>;
    public const member q_function uniqueKeys() : QList<Key>;
    public member q_function unite(const QMap<Key, T> & other) : QMap<Key, T> &;
    public const member q_function upperBound(const Key & key) : const_iterator;
    public member q_function upperBound(const Key & key) : iterator;
    public const member q_function value(const Key & key, const T & defaultValue) : const T;
    public const member q_function value(const Key & key) : const T;
    public const member q_function values() : QList<T>;
    public const member q_function values(const Key & key) : QList<T>;


}

